---
import SunIcon from "../icons/Sun.astro";
import SystemIcon from "../icons/System.astro";
import MoonIcon from "../icons/Moon.astro";
import HomeIcon from "../icons/Home.astro";
import PersonIcon from "../icons/Person.astro";
import CodeIcon from "../icons/Code.astro";
import SkillIcon from "../icons/Skill.astro";

const THEMES = ["Light", "Dark", "System"];
---

<header
  class="sticky top-0 flex justify-center lg:justify-between items-center py-5 w-full lg:w-[1120px] lg:px-2 mx-auto backdrop-blur-sm"
>
  <img class="size-8 min-w-12" src="/icon.png" alt="My personal photo" />
  <nav class="flex flex-row gap-x-8 lg:gap-x-10 ms-4 lg:ms-0 opacity-80">
    <a
      class="flex flex-row items-center text-slate-700 dark:text-white hover:text-sky-700 dark:hover:text-sky-400 transition-all"
      href="#top"
    >
      <span><HomeIcon width="20" height="20" class="" /></span>
      <span class="hidden md:flex items-center ms-1"> Inicio</span>
    </a>
    <a
      class="flex flex-row items-center text-slate-700 dark:text-white hover:text-sky-700 dark:hover:text-sky-400 transition-all"
      href="#about"
    >
      <span><PersonIcon width="20" height="20" class="" /></span>
      <span class="hidden md:flex items-center ms-1">Sobre mi</span>
    </a>
    <a
      class="flex flex-row items-center text-slate-700 dark:text-white hover:text-sky-700 dark:hover:text-sky-400 transition-all"
      href="#projects"
      aria-label="projects"
    >
      <span><CodeIcon width="20" height="20" class="" /></span>
      <span class="hidden md:flex items-center ms-1">Proyectos</span>
    </a>
    <a
      class="flex flex-row items-center text-slate-700 dark:text-white hover:text-sky-700 dark:hover:text-sky-400 transition-all"
      href="#skills"
      aria-label="skills"
    >
      <span><SkillIcon width="20" height="20" class="" /></span>
      <span class="hidden md:flex items-center ms-1">Habilidades</span>
    </a>
    <div class="relative ml-1 mr-1">
      <button
        id="theme-toggle-btn"
        class="appearance-none border-none flex hover:scale-125 transition"
      >
        <span class="sr-only">Elige el tema</span>
        <SunIcon
          id="light"
          class="text-slate-700 dark:text-white theme-toggle-icon size-5 transition-all"
        />
        <MoonIcon
          id="dark"
          class="text-slate-700 dark:text-white theme-toggle-icon absolute size-5 transition-all"
        />
        <SystemIcon
          id="system"
          class="text-slate-700 dark:text-white theme-toggle-icon absolute size-5 transition-all"
        />
      </button>
      <div
        id="themes-menu"
        class="absolute hidden scale-80 top-8 right-0 text-sm p-1 min-w-[8rem] rounded-md border border-gray-100 bg-white/90 dark:bg-gray-900/90 dark:border-gray-500/20 shadow-[0_3px_10px_rgb(0,0,0,0.2)] backdrop-blur-md"
      >
        <ul>
          {
            THEMES.map((theme) => (
              <li class="themes-menu-option text-slate-700 dark:text-white px-2 py-1.5 cursor-default hover:bg-neutral-400/40 dark:hover:bg-gray-500/50 rounded-sm">
                {theme}
              </li>
            ))
          }
        </ul>
      </div>
    </div>
  </nav>
</header>

<style>
  #themes-menu.open {
    display: inline;
    animation: scale-up-center 0.15s cubic-bezier(0.25, 0.46, 0.45, 0.94) both;
  }

  @keyframes scale-up-center {
    from {
      transform: scale(0.8);
      opacity: 0;
    }

    to {
      transform: scale(1);
      opacity: 1;
    }
  }
</style>

<script is:inline>
  let remove = null;
  const matchMedia = window.matchMedia("(prefers-color-scheme: dark)");
  const themesMenu = document.getElementById("themes-menu");

  const getThemePreference = () => {
    if (typeof localStorage !== "undefined") {
      return localStorage.getItem("theme") ?? "system";
    }

    return window.matchMedia("(prefers-color-scheme: dark)").matches
      ? "dark"
      : "light";
  };

  const updateIcon = (themePreference) => {
    document.querySelectorAll(".theme-toggle-icon").forEach((element) => {
      element.style.scale = element.id === themePreference ? "1" : "0";
    });
  };

  const updateTheme = () => {
    if (remove != null) {
      remove();
    }
    matchMedia.addEventListener("change", updateTheme);
    remove = () => {
      matchMedia.removeEventListener("change", updateTheme);
    };

    const themePreference = getThemePreference();
    const isDark =
      themePreference === "dark" ||
      (themePreference === "system" && matchMedia.matches);

    updateIcon(themePreference);
    document.documentElement.classList[isDark ? "add" : "remove"]("dark");
  };

  updateTheme();

  document.addEventListener("click", () => themesMenu.classList.remove("open"));

  document.getElementById("theme-toggle-btn").addEventListener("click", (e) => {
    e.stopPropagation();
    const isClosed = !themesMenu.classList.contains("open");
    themesMenu.classList[isClosed ? "add" : "remove"]("open");
  });

  document.querySelectorAll(".themes-menu-option").forEach((element) => {
    element.addEventListener("click", (e) => {
      localStorage.setItem("theme", e.target.innerText.toLowerCase().trim());
      updateTheme();
    });
  });
</script>
